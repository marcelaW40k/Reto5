/*
 * Pueda usar esta plantilla para la carga del reto a iMaster
 * Copie las clases de los paquetes Modelo, Vista, Controlador y Util
 * No incluya los import de los archivos .java solo las clases
 */
// Importaciones necesarias en iMaster
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";

    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;

        return DriverManager.getConnection(url);
    }
}

// Remplace en adelante por las clases de sus archivos .java

// Vista
public class VistaRequerimientos {

    public static final ControladorRequerimientos controlador = new ControladorRequerimientos();

    public static void requerimiento1() {
        try {
              // Su c√≥digo
            ArrayList<Requerimiento_1Vo> resultado1 = controlador.consultarRequerimiento1();
            resultado1.forEach(System.out::println);

        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }
    public static void requerimiento2() {
        try {
            ArrayList<Requerimiento_2Vo> resultado2 = controlador.consultarRequerimiento2();
            resultado2.forEach(System.out::println);
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

    public static void requerimiento3() {
        try {
            ArrayList<Requerimiento_3Vo> resultado3 = controlador.consultarRequerimiento3();
            resultado3.forEach(System.out::println);
        } catch (Exception e) {
            System.out.println("Se ha producido el siguiente error:" + e.getMessage());
            e.printStackTrace();
        }
    }

}


// Controlador
public class ControladorRequerimientos {
    private Requerimiento_1Dao requerimiento_1Dao;
    private Requerimiento_2Dao requerimiento_2Dao;
    private Requerimiento_3Dao requerimiento_3Dao;

    
    public ControladorRequerimientos() {
        this.requerimiento_1Dao = new Requerimiento_1Dao();
        this.requerimiento_2Dao = new Requerimiento_2Dao();
        this.requerimiento_3Dao = new Requerimiento_3Dao();  
    }
    public ArrayList<Requerimiento_1Vo> consultarRequerimiento1() throws SQLException {
       return this.requerimiento_1Dao.requerimiento1();
    }

    public ArrayList<Requerimiento_2Vo> consultarRequerimiento2() throws SQLException {
        return this.requerimiento_2Dao.requerimiento2();
    }

    public ArrayList<Requerimiento_3Vo> consultarRequerimiento3() throws SQLException {
        return this.requerimiento_3Dao.requerimiento3();
    }
}


// Modelo
// VO
public class Requerimiento_1Vo {
    private Integer idLider;
    private String nombre;
    private String primerApellido;
    private Integer salario;

    public Requerimiento_1Vo() {
    }

    public Integer getIdLider() {
        return idLider;
    }

    public void setIdLider(Integer idLider) {
        this.idLider = idLider;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getPrimerApellido() {
        return primerApellido;
    }

    public void setPrimerApellido(String primerApellido) {
        this.primerApellido = primerApellido;
    }

    public Integer getSalario() {
        return salario;
    }

    public void setSalario(Integer salario) {
        this.salario = salario;
    }

    @Override
    public String toString() {
        return "Requerimiento_1Vo [idLider=" + idLider + ", nombre=" + nombre + ", primerApellido=" + primerApellido
                + ", salario=" + salario + "]";
    }

public class Requerimiento_2Vo {
    private Integer idProyecto;
    private String nombreMaterial;

    public Requerimiento_2Vo() {
    }

    public Integer getIdProyecto() {
        return idProyecto;
    }

    public void setIdProyecto(Integer idProyecto) {
        this.idProyecto = idProyecto;
    }

    public String getNombreMaterial() {
        return nombreMaterial;
    }

    public void setNombreMaterial(String nombreMaterial) {
        this.nombreMaterial = nombreMaterial;
    }

    @Override
    public String toString() {
        return "Requerimiento_2Vo [idProyecto=" + idProyecto + ", nombreMaterial=" + nombreMaterial + "]";
    }
    
}


public class Requerimiento_3Vo {
    private Integer idProyecto;
    private String ciudadProyecto;
    private String nombreLider;

    public Requerimiento_3Vo() {
    }

    public Integer getIdProyecto() {
        return idProyecto;
    }

    public void setIdProyecto(Integer idProyecto) {
        this.idProyecto = idProyecto;
    }

    public String getCiudadProyecto() {
        return ciudadProyecto;
    }

    public void setCiudadProyecto(String ciudadProyecto) {
        this.ciudadProyecto = ciudadProyecto;
    }

    public String getNombreLider() {
        return nombreLider;
    }

    public void setNombreLider(String nombreLider) {
        this.nombreLider = nombreLider;
    }

    @Override
    public String toString() {
        return "Requerimiento_3Vo [ciudadProyecto=" + ciudadProyecto + ", idProyecto=" + idProyecto + ", nombreLider="
                + nombreLider + "]";
    }

}


// DAO
public class Requerimiento_1Dao {
    public ArrayList<Requerimiento_1Vo> requerimiento1() throws SQLException {
        Connection connection = JDBCUtilities.getConnection();
        ArrayList<Requerimiento_1Vo> req1 = new ArrayList<Requerimiento_1Vo>();
        String sql = "SELECT l.ID_Lider, l.Nombre, l.Primer_Apellido, l.Salario FROM Lider l WHERE l.Salario > (SELECT AVG(l.Salario) FROM Lider l) ORDER BY l.Salario DESC";
        try(Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)){
            while (rs.next()) {
                Requerimiento_1Vo requerimiento1 = new Requerimiento_1Vo();
                requerimiento1.setIdLider(rs.getInt("ID_Lider"));
                requerimiento1.setNombre(rs.getString("Nombre"));
                requerimiento1.setPrimerApellido(rs.getString("Primer_Apellido"));
                requerimiento1.setSalario(rs.getInt("Salario"));
                req1.add(requerimiento1);
                
            }

        }
        return req1;
    }
}

public class Requerimiento_2Dao {
    public ArrayList<Requerimiento_2Vo> requerimiento2() throws SQLException {
        Connection connection = JDBCUtilities.getConnection();
        ArrayList<Requerimiento_2Vo> req2 = new ArrayList<Requerimiento_2Vo>();
        String sql ="SELECT p.ID_Proyecto, mc.Nombre_Material FROM Proyecto p JOIN Compra c ON (p.ID_Proyecto=c.ID_Proyecto) JOIN MaterialConstruccion mc ON (c.ID_MaterialConstruccion=mc.ID_MaterialConstruccion) WHERE p.ID_Proyecto In (12,15,18) ORDER BY p.ID_Proyecto DESC";
        try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sql)){
            while (rs.next()) {
                Requerimiento_2Vo requerimiento2 = new Requerimiento_2Vo();
                requerimiento2.setIdProyecto(rs.getInt("ID_Proyecto"));
                requerimiento2.setNombreMaterial(rs.getString("Nombre_Material"));
                req2.add(requerimiento2);
                
            }
        }
        return req2;
    }
}

public class Requerimiento_3Dao {
    public ArrayList<Requerimiento_3Vo> requerimiento3() throws SQLException {
        Connection connection = JDBCUtilities.getConnection();
        ArrayList<Requerimiento_3Vo> req3 = new ArrayList<Requerimiento_3Vo>();        String sql = "SELECT p.ID_Proyecto, p.Ciudad, l.Nombre FROM Proyecto p, Lider l WHERE (p.ID_Lider = l.ID_Lider) AND (p.ID_Proyecto <=30)";
        try(Statement stmt = connection.createStatement(); ResultSet rs= stmt.executeQuery(sql)){
            while (rs.next()) {
                Requerimiento_3Vo requerimiento3 = new Requerimiento_3Vo();
                requerimiento3.setIdProyecto(rs.getInt("ID_Proyecto"));
                requerimiento3.setCiudadProyecto(rs.getString("Ciudad"));
                requerimiento3.setNombreLider(rs.getString("Nombre"));
                req3.add(requerimiento3);
                
            }
        }
        return req3;
    }
}